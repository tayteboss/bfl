<!-- Filter Trigger -->
<button id="open-filters" type="button" aria-haspopup="dialog" aria-controls="filters-modal">+ Filters</button>

<!-- Active Filters -->
<div id="active-filters"></div>

<!-- Modal -->
<div id="filters-modal" style="display:none;" role="dialog" aria-modal="true" aria-labelledby="filters-modal-title">
  <div>
    <h3 id="filters-modal-title">Filters</h3>

    <!-- TAGS -->
    <fieldset>
      <legend>Tags</legend>
      {% assign all_tags = '' | split: '' %}
      {% for product in collection.products %}
        {% assign all_tags = all_tags | concat: product.tags %}
      {% endfor %}
      {% assign tag_list = all_tags | uniq %}
      {% for tag in tag_list %}
        {% if tag != blank %}
          <label>
            <input
              type="checkbox"
              value="{{ tag | escape }}"
              class="filter-option"
              data-filter-type="tag"
            >
            {{ tag }}
          </label>
        {% endif %}
      {% endfor %}
    </fieldset>

    <!-- VENDORS -->
    <fieldset>
      <legend>Brands</legend>
      {% assign all_vendors = '' | split: '' %}
      {% for product in collection.products %}
        {% assign vendor_array = product.vendor | split: '|||' %}
        {% assign all_vendors = all_vendors | concat: vendor_array %}
      {% endfor %}
      {% assign vendor_list = all_vendors | uniq %}
      {% for vendor in vendor_list %}
        {% if vendor != blank %}
          <label>
            <input
              type="checkbox"
              value="{{ vendor | escape }}"
              class="filter-option"
              data-filter-type="vendor"
            >
            {{ vendor }}
          </label>
        {% endif %}
      {% endfor %}
    </fieldset>

    <!-- COLLECTIONS -->
    <fieldset>
      <legend>Categories</legend>
      {% for coll in collections %}
        {% if coll.handle != 'events' %}
          <label>
            <input
              type="checkbox"
              value="{{ coll.title | escape }}"
              class="filter-option"
              data-filter-type="collection"
            >
            {{ coll.title }}
          </label>
        {% endif %}
      {% endfor %}
    </fieldset>

    <button id="apply-filters" type="button">Apply</button>
    <button id="close-filters" type="button">Close</button>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const openBtn = document.getElementById('open-filters');
    const closeBtn = document.getElementById('close-filters');
    const applyBtn = document.getElementById('apply-filters');
    const modal = document.getElementById('filters-modal');
    const activeFiltersDiv = document.getElementById('active-filters');
    const filterOptions = document.querySelectorAll('.filter-option');

    let activeFilters = [];

    // Modal toggle
    openBtn.addEventListener('click', () => {
      modal.style.display = 'block';
      modal.setAttribute('aria-hidden', 'false');
    });
    closeBtn.addEventListener('click', () => {
      modal.style.display = 'none';
      modal.setAttribute('aria-hidden', 'true');
    });

    // Apply filters
    applyBtn.addEventListener('click', () => {
      activeFilters = [];
      filterOptions.forEach((opt) => {
        if (opt.checked) {
          activeFilters.push({ type: opt.dataset.filterType, value: opt.value });
        }
      });
      renderActiveFilters();
      modal.style.display = 'none';
      modal.setAttribute('aria-hidden', 'true');
      filterProducts();
    });

    // Render filter chips
    function renderActiveFilters() {
      activeFiltersDiv.innerHTML = '';
      activeFilters.forEach((f) => {
        const chip = document.createElement('span');
        chip.className = 'active-filter-chip';
        chip.textContent = f.value + ' ';
        const remove = document.createElement('button');
        remove.type = 'button';
        remove.textContent = 'Ã—';
        remove.setAttribute('aria-label', 'Remove filter ' + f.value);
        remove.addEventListener('click', () => {
          activeFilters = activeFilters.filter((x) => x.value !== f.value);
          filterOptions.forEach((opt) => {
            if (opt.value === f.value) opt.checked = false;
          });
          renderActiveFilters();
          filterProducts();
        });
        chip.appendChild(remove);
        activeFiltersDiv.appendChild(chip);
      });
    }

    // Dynamic filtering
    function filterProducts() {
      const products = document.querySelectorAll('[data-product-tags][data-product-vendor][data-product-collections]');

      const filterHandlers = {
        tag: (prod, value) =>
          (prod.dataset.productTags || '')
            .split(',')
            .map((s) => s.trim())
            .includes(value),
        vendor: (prod, value) => prod.dataset.productVendor === value,
        collection: (prod, value) =>
          (prod.dataset.productCollections || '')
            .split(',')
            .map((s) => s.trim())
            .includes(value),

        // Extendable:
        // price: (prod, value) => parseFloat(prod.dataset.productPrice) <= parseFloat(value),
        // color: (prod, value) => (prod.dataset.productColors || '').split(',').includes(value),
      };

      products.forEach((prod) => {
        const match = activeFilters.some((f) => filterHandlers[f.type]?.(prod, f.value));
        prod.style.display = match || activeFilters.length === 0 ? '' : 'none';
      });
    }
  });
</script>
