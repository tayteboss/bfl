<!-- Filter Trigger -->
<div data-hover-shake="small">
  <button
    id="open-filters"
    type="button"
    aria-haspopup="dialog"
    aria-controls="filters-modal"
    class="primary-button primary-button--small"
  >
    + Filters
  </button>
</div>

<!-- Active Filters -->
<div id="active-filters"></div>

<!-- Modal -->
<div
  id="filters-modal"
  class="filters-modal"
  role="dialog"
  aria-modal="true"
  aria-labelledby="filters-modal-title"
  aria-hidden="true"
>
  <div class="filters-modal__dialog" role="document">
    {% comment %} <h3 class="filters-modal-title type-button-large">Filters</h3> {% endcomment %}

    {% comment %} Here there will be 3 buttons, All - New arrivals and Sale {% endcomment %}
    {% capture quick_links_html %}
      {% assign all_products_count = 0 %}
      {% if collections['all'] %}
        {% assign all_products_count = collections['all'].products_count | plus: 0 %}
      {% endif %}
      <a href="{{ routes.all_products_collection_url }}" class="primary-button primary-button--modal-filter">
        All{% if all_products_count > 0 %} <span>{{ all_products_count }}</span>{% endif %}
      </a>

      {% assign new_arrivals_count = 0 %}
      {% if collections['new-arrivals'] %}
        {% assign new_arrivals_count = collections['new-arrivals'].products_count | plus: 0 %}
        <a href="{{ collections['new-arrivals'].url }}" class="primary-button primary-button--modal-filter">
          New Arrivals{% if new_arrivals_count > 0 %} <span>{{ new_arrivals_count }}</span>{% endif %}
        </a>
      {% endif %}

      {% assign sale_count = 0 %}
      {% if collections['sale'] %}
        {% assign sale_count = collections['sale'].products_count | plus: 0 %}
        <a href="{{ collections['sale'].url }}" class="primary-button primary-button--modal-filter primary-button--red">
          Sale{% if sale_count > 0 %} <span>{{ sale_count }}</span>{% endif %}
        </a>
      {% endif %}
    {% endcapture %}
    {% render 'filter-link-group', title: 'Shop by', content_html: quick_links_html %}

    {% comment %} Here will be the list of collections which are buttons that immediately send the user to /collection/chosen-collection-name {% endcomment %}
    {% capture collections_links_html %}
      {% for coll in collections %}
        {% if coll.handle != 'events' and coll.handle != 'all' and coll.handle != 'new-arrivals' and coll.handle != 'sale' %}
          {% assign coll_count = coll.products_count | plus: 0 %}
          <a href="{{ coll.url }}" class="primary-button primary-button--modal-filter">
            {{ coll.title }}{% if coll_count > 0 %} <span>{{ coll_count }}</span>{% endif %}
          </a>
        {% endif %}
      {% endfor %}
    {% endcapture %}
    {% render 'filter-link-group', title: 'Collections', content_html: collections_links_html %}

    {% comment %} Here will be tags for the current collection. If we are on the collection/film then there will be tags such as 35mm etc. {% endcomment %}

    <!-- TAGS -->
    {% assign all_tags = '' | split: '' %}
    {% for product in collection.products %}
      {% assign all_tags = all_tags | concat: product.tags %}
    {% endfor %}
    {% assign tag_list = all_tags | uniq %}
    {% render 'filter-group', title: 'Tags', items: tag_list, type: 'tag' %}

    {% comment %} Finally here will be brands or vendors for the current collection. {% endcomment %}
    <!-- VENDORS -->
    {% assign all_vendors = '' | split: '' %}
    {% for product in collection.products %}
      {% assign vendor_array = product.vendor | split: '|||' %}
      {% assign all_vendors = all_vendors | concat: vendor_array %}
    {% endfor %}
    {% assign vendor_list = all_vendors | uniq %}
    {% render 'filter-group', title: 'Brands', items: vendor_list, type: 'vendor' %}

    <div class="filters-modal__actions">
      <button id="apply-filters" type="button" class="primary-button primary-button--modal-filter rounded">
        Apply
      </button>
      <button
        id="close-filters"
        type="button"
        class="primary-button primary-button--modal-filter primary-button--outline-white"
      >
        Close
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const openBtn = document.getElementById('open-filters');
    const closeBtn = document.getElementById('close-filters');
    const applyBtn = document.getElementById('apply-filters');
    const modal = document.getElementById('filters-modal');
    const activeFiltersDiv = document.getElementById('active-filters');
    const filterOptions = document.querySelectorAll('.filter-option');

    let activeFilters = [];

    // Move modal to end of body to avoid stacking context issues
    if (modal && modal.parentNode !== document.body) {
      document.body.appendChild(modal);
    }

    // Modal toggle
    function openModal() {
      modal.classList.add('is-open');
      modal.setAttribute('aria-hidden', 'false');
      document.body.classList.add('is-modal-open');
    }

    function closeModal() {
      modal.classList.remove('is-open');
      modal.setAttribute('aria-hidden', 'true');
      document.body.classList.remove('is-modal-open');
    }

    openBtn.addEventListener('click', openModal);
    closeBtn.addEventListener('click', closeModal);
    modal.addEventListener('click', (e) => {
      if (e.target === modal) closeModal();
    });

    // Apply filters
    applyBtn.addEventListener('click', () => {
      activeFilters = [];
      filterOptions.forEach((opt) => {
        if (opt.checked) {
          activeFilters.push({ type: opt.dataset.filterType, value: opt.value });
        }
      });
      renderActiveFilters();
      closeModal();
      filterProducts();
    });

    // Render filter chips
    function renderActiveFilters() {
      activeFiltersDiv.innerHTML = '';
      activeFilters.forEach((f) => {
        const chip = document.createElement('span');
        chip.className = 'active-filter-chip';
        chip.textContent = f.value + ' ';
        const remove = document.createElement('button');
        remove.type = 'button';
        remove.textContent = 'Ã—';
        remove.setAttribute('aria-label', 'Remove filter ' + f.value);
        remove.addEventListener('click', () => {
          activeFilters = activeFilters.filter((x) => x.value !== f.value);
          filterOptions.forEach((opt) => {
            if (opt.value === f.value) opt.checked = false;
          });
          renderActiveFilters();
          filterProducts();
        });
        chip.appendChild(remove);
        activeFiltersDiv.appendChild(chip);
      });
    }

    // Dynamic filtering
    function filterProducts() {
      const products = document.querySelectorAll('[data-product-tags][data-product-vendor][data-product-collections]');

      const filterHandlers = {
        tag: (prod, value) =>
          (prod.dataset.productTags || '')
            .split(',')
            .map((s) => s.trim())
            .includes(value),
        vendor: (prod, value) => prod.dataset.productVendor === value,
        collection: (prod, value) =>
          (prod.dataset.productCollections || '')
            .split(',')
            .map((s) => s.trim())
            .includes(value),

        // Extendable:
        // price: (prod, value) => parseFloat(prod.dataset.productPrice) <= parseFloat(value),
        // color: (prod, value) => (prod.dataset.productColors || '').split(',').includes(value),
      };

      products.forEach((prod) => {
        const match = activeFilters.some((f) => filterHandlers[f.type]?.(prod, f.value));
        prod.style.display = match || activeFilters.length === 0 ? '' : 'none';
      });
    }
  });
</script>
