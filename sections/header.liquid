{{ 'header.css' | asset_url | stylesheet_tag }}

<header>
  {% render 'header-logo' %}

  <button class="menu-toggle" aria-label="Open Menu" data-text="Menu">Menu</button>

  <a class="cart-button" href="{{ routes.cart_url }}">
    Bag
    <div class="cart-button__bubble">
      <span class="cart-button__number">{{ cart.item_count }}</span>
    </div>
  </a>

  <div class="menu-overlay" id="menu-overlay">
    <nav class="menu-list">
      {% for link in section.settings.navigation.links %}
        <a
          class="menu-list__item{% if link.active %} menu-list__item--active{% endif %}"
          href="{{ link.url }}"
        >
          {{- link.title -}}
        </a>
      {% endfor %}
      {% if shop.customer_accounts_enabled %}
        <a
          class="menu-list__item{% if routes.account_url == request.path %} menu-list__item--active{% endif %}"
          href="{{ routes.account_url }}"
          >My Account</a
        >
      {% endif %}
    </nav>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const header = document.querySelector('header');
    const menuToggle = document.querySelector('.menu-toggle');
    const body = document.body;
    const headerLogo = document.querySelector('.header__logo');

    // Get and set header logo height as CSS variable
    const updateLogoHeight = () => {
      if (headerLogo) {
        const logoHeight = headerLogo.offsetHeight;
        document.documentElement.style.setProperty('--logo-height', `${logoHeight}px`);
      }
    };

    // Initial set
    updateLogoHeight();

    // Update on resize
    window.addEventListener('resize', updateLogoHeight);

    menuToggle.addEventListener('click', () => {
      header.classList.toggle('menu-open');
      const isOpen = header.classList.contains('menu-open');
      menuToggle.textContent = isOpen ? 'Close' : 'Menu';
      menuToggle.setAttribute('aria-label', isOpen ? 'Close Menu' : 'Open Menu');

      // Toggle overflow hidden on body to prevent scrolling
      body.classList.toggle('overflow-hidden', isOpen);
    });

    // Toggle `scrolled` class on header when beyond threshold
    if (window.ScrollUtils && typeof window.ScrollUtils.onScroll === 'function') {
      const threshold = 150;
      const updateHeaderScrollState = (y) => {
        header.classList.toggle('scrolled', y > threshold);
      };
      const unsubscribe = window.ScrollUtils.onScroll(updateHeaderScrollState);

      // Optional: clean up if this section is dynamically replaced
      document.addEventListener('shopify:section:unload', () => {
        if (typeof unsubscribe === 'function') unsubscribe();
      });
    }
  });
</script>

{% schema %}
{
  "name": "header",
  "settings": [
    {
      "type": "link_list",
      "id": "navigation",
      "label": "t:labels.menu"
    },
    {
      "type": "image_picker",
      "id": "logo",
      "label": "logo"
    }
  ]
}
{% endschema %}
