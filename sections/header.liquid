{{ 'header.css' | asset_url | stylesheet_tag }}

<header>
  <div class="menu-list-wrapper">
    <nav class="menu-list">
      {% for link in section.settings.navigation.links %}
        <a
          class="menu-list__item{% if link.active %} menu-list__item--active{% endif %}"
          href="{{ link.url }}"
          data-hover-shake="left"
        >
          <span class="menu-list__item__icon"></span>
          <span>
            {{- link.title -}}
          </span>
        </a>
      {% endfor %}
      {% if shop.customer_accounts_enabled %}
        <a
          class="menu-list__item{% if routes.account_url == request.path %} menu-list__item--active{% endif %}"
          href="{{ routes.account_url }}"
          data-hover-shake="left"
          :
        >
          <span class="menu-list__item__icon"></span>
          <span> My Account </span>
        </a>
      {% endif %}
      <a
        class="menu-list__item menu-list__item--yellow cart-button cart-button--mobile menu-bubble"
        href="{{ routes.cart_url }}"
      >
        <span class="menu-list__item__icon"></span>
        <span>Bag</span>
        <div class="cart-button__bubble">
          <span class="cart-button__number">{{ cart.item_count }}</span>
        </div>
      </a>
    </nav>
    <div data-hover-shake="left">
      <button class="menu-toggle menu-bubble" aria-label="Open Menu" data-text="Menu">
        <div class="menu-toggle__icon"></div>
        <span>Menu</span>
        {% if cart.item_count > 0 %}
          <span class="menu-toggle__number">{{ cart.item_count }}</span>
        {% endif %}
      </button>
    </div>
  </div>

  <div data-hover-shake="right">
    <a class="cart-button cart-button--desktop menu-bubble" href="{{ routes.cart_url }}">
      <span>Bag</span>
      <div class="cart-button__bubble">
        <span class="cart-button__number">{{ cart.item_count }}</span>
      </div>
    </a>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const header = document.querySelector('header');
    const menuToggle = document.querySelector('.menu-toggle');
    const body = document.body;
    const footer = document.querySelector('.footer');
    const logoEl = document.querySelector('.header__logo');
    const menuOverlay = document.getElementById('menu-overlay');
    const menuListWrapper = document.querySelector('.menu-list-wrapper');
    const windowHeight = window.innerHeight;

    const MAX_RANGE_PX = windowHeight / 2;
    const MIN_WGHT = 10;
    const MAX_WGHT = 250;

    // Track scroll direction to hide/show the menu toggle button
    let lastScrollY = window.scrollY || window.pageYOffset || 0;
    const SCROLL_DIR_THRESHOLD = 5; // debounce small scroll jitters
    const MENU_TOGGLE_HIDDEN_CLASS = 'header--hidden';

    // Hysteresis: after header reappears on upward scroll, require 1/4 window height
    // of downward scrolling before minimising (hiding) it again. Also run a blink
    // animation during this grace period.
    let reMinimiseBlocked = false;
    let unminimiseAnchorY = 0;
    let reMinimiseDistancePx = window.innerHeight / 4;
    const updateReMinimiseDistance = () => {
      reMinimiseDistancePx = window.innerHeight / 4;
    };

    let footerHeight = footer ? footer.offsetHeight : 500;

    const updateFooterHeight = () => {
      if (footer) {
        footerHeight = footer.offsetHeight + 200;
      }
    };

    const updateHideHeader = () => {
      const doc = document.documentElement;
      const scrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      const documentHeight = doc.scrollHeight;
      const scrollThreshold = windowHeight / 2;
      const footerThreshold = footerHeight / 2;

      const distanceToBottom = documentHeight - scrollY - windowHeight;
      const isPastScrollThreshold = scrollY > scrollThreshold;
      const isNearFooter = distanceToBottom <= footerThreshold;

      const shouldHide = isPastScrollThreshold && isNearFooter;
      body.classList.toggle('hide-header', shouldHide);
    };

    // Toggle minimise-header based on threshold and scroll direction
    const updateMinimiseHeader = (y, diff) => {
      const currentY = typeof y === 'number' ? y : window.scrollY || window.pageYOffset || 0;
      const isPast = currentY > MAX_RANGE_PX;
      if (!isPast) {
        body.classList.remove('minimise-header');
        // Reset any blocking once well above the fold
        if (
          reMinimiseBlocked &&
          window.HeaderLogoBlink &&
          typeof window.HeaderLogoBlink.stopReMinimiseBlink === 'function'
        ) {
          window.HeaderLogoBlink.stopReMinimiseBlink();
        }
        reMinimiseBlocked = false;
        return;
      }
      if (typeof diff === 'number') {
        if (diff > SCROLL_DIR_THRESHOLD) {
          // Scrolling down: only minimise if we've scrolled enough since unminimising
          if (reMinimiseBlocked) {
            const traveled = currentY - unminimiseAnchorY;
            if (traveled >= reMinimiseDistancePx) {
              body.classList.add('minimise-header');
              reMinimiseBlocked = false;
              // Ensure any prior blink is stopped (defensive)
              if (window.HeaderLogoBlink && typeof window.HeaderLogoBlink.stopReMinimiseBlink === 'function') {
                window.HeaderLogoBlink.stopReMinimiseBlink();
              }
            } else {
              body.classList.remove('minimise-header');
            }
          } else {
            body.classList.add('minimise-header');
          }
        } else if (diff < -SCROLL_DIR_THRESHOLD) {
          // Scrolling up: reveal header without triggering weight animation
          body.classList.remove('minimise-header');
          reMinimiseBlocked = true;
          unminimiseAnchorY = currentY;
          // No blink on upward scroll per spec
        }
      } else {
        // Default state when past threshold without direction info
        if (reMinimiseBlocked) {
          const traveled = currentY - unminimiseAnchorY;
          if (traveled >= reMinimiseDistancePx) {
            body.classList.add('minimise-header');
            reMinimiseBlocked = false;
            if (window.HeaderLogoBlink && typeof window.HeaderLogoBlink.stopReMinimiseBlink === 'function') {
              window.HeaderLogoBlink.stopReMinimiseBlink();
            }
          } else {
            body.classList.remove('minimise-header');
          }
        } else {
          body.classList.add('minimise-header');
        }
      }
    };

    function closeMenu() {
      if (!header.classList.contains('menu-open')) return;
      header.classList.remove('menu-open');
      const menuTextSpan = menuToggle.querySelector('span:not(.menu-toggle__number)');
      if (menuTextSpan) menuTextSpan.textContent = 'Menu';
      menuToggle.setAttribute('aria-label', 'Open Menu');
      body.classList.remove('overflow-hidden');
      body.classList.remove('menu-open');
      document.removeEventListener('click', onDocumentClick, true);
    }

    function onDocumentClick(e) {
      if (!header.classList.contains('menu-open')) return;
      const target = e.target;
      // Ignore clicks on the toggle itself
      if (menuToggle && (target === menuToggle || menuToggle.contains(target))) return;
      // If wrapper exists and the click is inside it, ignore
      if (menuListWrapper && menuListWrapper.contains(target)) return;
      // Fallback: if no wrapper, allow clicks inside the menu list to pass
      if (!menuListWrapper && menuOverlay) {
        const list = menuOverlay.querySelector('.menu-list');
        if (list && list.contains(target)) return;
      }
      closeMenu();
    }

    menuToggle.addEventListener('click', (ev) => {
      header.classList.toggle('menu-open');
      const isOpen = header.classList.contains('menu-open');
      const menuTextSpan = menuToggle.querySelector('span:not(.menu-toggle__number)');
      if (menuTextSpan) menuTextSpan.textContent = isOpen ? 'Close' : 'Menu';
      menuToggle.setAttribute('aria-label', isOpen ? 'Close Menu' : 'Open Menu');

      // Ensure the toggle remains visible while the menu is open
      if (isOpen) header.classList.remove(MENU_TOGGLE_HIDDEN_CLASS);

      // Toggle overflow hidden on body to prevent scrolling
      body.classList.toggle('overflow-hidden', isOpen);
      body.classList.toggle('menu-open', isOpen);

      // Click-outside listener lifecycle
      if (isOpen) {
        document.addEventListener('click', onDocumentClick, true);
      } else {
        document.removeEventListener('click', onDocumentClick, true);
      }
    });

    // Mark fonts-ready to avoid logo shift when variable fonts load
    (function waitForFonts() {
      try {
        if (document && document.fonts && typeof document.fonts.ready?.then === 'function') {
          document.fonts.ready.then(() => {
            document.documentElement.classList.add('fonts-ready');
          });
        } else {
          // Fallback: wait for window load
          window.addEventListener('load', () => {
            document.documentElement.classList.add('fonts-ready');
          });
        }
      } catch (e) {
        // Defensive: ensure logo is shown even if fonts API fails
        document.documentElement.classList.add('fonts-ready');
      }
    })();

    // Toggle `scrolled` and `minimise-header` on header when beyond threshold and hide near page bottom
    if (window.ScrollUtils && typeof window.ScrollUtils.onScroll === 'function') {
      const threshold = MAX_RANGE_PX;
      const onScrollUpdate = (y) => {
        const currentY = typeof y === 'number' ? y : window.scrollY || window.pageYOffset || 0;
        const diff = currentY - lastScrollY;
        header.classList.toggle('scrolled', currentY > threshold);
        updateMinimiseHeader(currentY, diff);
        updateHideHeader();

        // Hide the menu toggle when scrolling down, show when scrolling up
        if (header.classList.contains('menu-open')) {
          header.classList.remove(MENU_TOGGLE_HIDDEN_CLASS);
        } else {
          if (diff > SCROLL_DIR_THRESHOLD) {
            header.classList.add(MENU_TOGGLE_HIDDEN_CLASS);
          } else if (diff < -SCROLL_DIR_THRESHOLD) {
            header.classList.remove(MENU_TOGGLE_HIDDEN_CLASS);
          }
        }
        lastScrollY = currentY;
      };
      const unsubscribe = window.ScrollUtils.onScroll(onScrollUpdate);

      // Optional: clean up if this section is dynamically replaced
      document.addEventListener('shopify:section:unload', () => {
        if (typeof unsubscribe === 'function') unsubscribe();
      });
    } else {
      const onScrollFallback = () => {
        const currentY = window.scrollY || window.pageYOffset || 0;
        const diff = currentY - lastScrollY;
        header.classList.toggle('scrolled', currentY > MAX_RANGE_PX);
        updateMinimiseHeader(currentY, diff);
        updateHideHeader();

        // Hide the menu toggle when scrolling down, show when scrolling up
        if (header.classList.contains('menu-open')) {
          header.classList.remove(MENU_TOGGLE_HIDDEN_CLASS);
        } else {
          if (diff > SCROLL_DIR_THRESHOLD) {
            header.classList.add(MENU_TOGGLE_HIDDEN_CLASS);
          } else if (diff < -SCROLL_DIR_THRESHOLD) {
            header.classList.remove(MENU_TOGGLE_HIDDEN_CLASS);
          }
        }
        lastScrollY = currentY;
      };
      window.addEventListener('scroll', onScrollFallback, { passive: true });
      document.addEventListener('shopify:section:unload', () => {
        window.removeEventListener('scroll', onScrollFallback);
        document.removeEventListener('click', onDocumentClick, true);
      });
    }

    window.addEventListener('resize', () => {
      updateFooterHeight();
      updateHideHeader();
      updateReMinimiseDistance();
    });

    updateFooterHeight();
    updateHideHeader();
    updateMinimiseHeader();

    // Step-based random weight for header logo + collapse via wdth after 500px
    if (logoEl) {
      const STEP_PX = 40;

      let lastStep = -1;
      let lastWeight = 0;
      let lastYForWght = window.scrollY || window.pageYOffset || 0;
      let initialBlinkTimer = null; // legacy timeout handle
      let initialBlinkInterval = null; // new dedicated interval for startup blink
      let initialBlinkActive = false;

      let weightDirection = 1;
      const WGHT_STEP = 25;
      function nextSteppedWeight() {
        const current = lastWeight || 80;
        let next = current + weightDirection * WGHT_STEP;
        if (next >= MAX_WGHT) {
          next = MAX_WGHT;
          weightDirection = -1;
        } else if (next <= MIN_WGHT) {
          next = MIN_WGHT;
          weightDirection = 1;
        }
        return next;
      }

      // Seed from current CSS variable to avoid resetting on first scroll
      function getCurrentVarWeight() {
        const raw = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--font-weight-header'), 10);
        if (Number.isNaN(raw)) return null;
        return raw < MIN_WGHT ? MIN_WGHT : raw > MAX_WGHT ? MAX_WGHT : raw;
      }
      const seeded = getCurrentVarWeight();
      if (seeded !== null) {
        lastWeight = seeded;
        if (lastWeight >= MAX_WGHT) weightDirection = -1;
        else if (lastWeight <= MIN_WGHT) weightDirection = 1;
      }

      function applyForY(y) {
        const clampedY = y < 0 ? 0 : y;
        const isScrollingUp = clampedY < lastYForWght;
        if (clampedY > MAX_RANGE_PX) {
          // Collapse width to 0; keep weight driven by CSS variable
          logoEl.style.fontVariationSettings = `"wght" var(--font-weight-header), "wdth" 0`;
          // Do not return; continue stepping weight while scrolling down past threshold
        }
        // Keep current weight for first 50px from top; do not reset
        if (clampedY < 50) {
          lastStep = Math.floor(clampedY / STEP_PX);
          if (!lastWeight) {
            const seededNow = getCurrentVarWeight();
            if (seededNow !== null) lastWeight = seededNow;
          }
          // Clear inline overrides so stylesheet uses the variable
          logoEl.style.fontVariationSettings = '';
          lastYForWght = clampedY;
          return;
        }
        const step = Math.floor(clampedY / STEP_PX);
        if (step !== lastStep) {
          // Suppress weight changes when scrolling up within the threshold
          if (isScrollingUp) {
            lastYForWght = clampedY;
            return;
          }
          lastStep = step;
          lastWeight = nextSteppedWeight();
          document.documentElement.style.setProperty('--font-weight-header', String(lastWeight));
          // Only clear inline override below threshold so width collapse remains past threshold
          if (clampedY <= MAX_RANGE_PX && logoEl.style.fontVariationSettings) logoEl.style.fontVariationSettings = '';
        }
        lastYForWght = clampedY;
      }

      // Initialize with current position
      applyForY(window.scrollY || window.pageYOffset || 0);

      let unsubscribeLogo;
      if (window.ScrollUtils && typeof window.ScrollUtils.onScroll === 'function') {
        unsubscribeLogo = window.ScrollUtils.onScroll(applyForY);
      } else {
        const onScroll = () => applyForY(window.scrollY || window.pageYOffset || 0);
        window.addEventListener('scroll', onScroll, { passive: true });
        unsubscribeLogo = () => window.removeEventListener('scroll', onScroll);
      }

      // Cleanup when section is unloaded in the theme editor
      document.addEventListener('shopify:section:unload', () => {
        if (typeof unsubscribeLogo === 'function') unsubscribeLogo();
      });

      const HOVER_INTERVAL_MS = 120;
      const INITIAL_TIMER_LENGTH_MS = 1000;
      let hoverTimer = null;
      let isHovering = false;

      function getCurrentWeight() {
        // Use lastWeight from scroll logic to keep continuity
        return lastWeight || 80;
      }

      function startHoverRandomizer() {
        if (hoverTimer) return;
        const headerEl = document.querySelector('header');
        if (headerEl.classList.contains('menu-open')) return;
        hoverTimer = setInterval(() => {
          const yPos = window.scrollY || window.pageYOffset || 0;
          lastWeight = nextSteppedWeight();
          document.documentElement.style.setProperty('--font-weight-header', String(lastWeight));
          // Only clear inline override below threshold so width collapse remains past threshold
          if (yPos <= MAX_RANGE_PX && logoEl.style.fontVariationSettings) logoEl.style.fontVariationSettings = '';
        }, HOVER_INTERVAL_MS);
      }

      function stopHoverRandomizer() {
        if (hoverTimer) {
          clearInterval(hoverTimer);
          hoverTimer = null;
        }
        isHovering = false;
        // Do not restore inline style; root variable persists the last weight
      }

      // Re-minimise grace-period blink (used while header is revealed after upward scroll)
      let reMinimiseBlinkInterval = null;
      function startReMinimiseBlink() {
        if (reMinimiseBlinkInterval) return;
        reMinimiseBlinkInterval = setInterval(() => {
          lastWeight = nextSteppedWeight();
          document.documentElement.style.setProperty('--font-weight-header', String(lastWeight));
        }, HOVER_INTERVAL_MS);
      }
      function stopReMinimiseBlink() {
        if (reMinimiseBlinkInterval) {
          clearInterval(reMinimiseBlinkInterval);
          reMinimiseBlinkInterval = null;
        }
      }
      window.HeaderLogoBlink = { startReMinimiseBlink, stopReMinimiseBlink };

      // Enable hover-triggered randomizer for weight changes
      logoEl.addEventListener('mouseenter', () => {
        isHovering = true;
        startHoverRandomizer();
      });
      logoEl.addEventListener('mouseleave', stopHoverRandomizer);

      // 1) Initial blink on load for 2s using a dedicated interval (separate from hover)
      function runInitialBlink() {
        if (initialBlinkInterval) {
          clearInterval(initialBlinkInterval);
          initialBlinkInterval = null;
        }
        initialBlinkActive = true;
        initialBlinkInterval = setInterval(() => {
          lastWeight = nextSteppedWeight();
          document.documentElement.style.setProperty('--font-weight-header', String(lastWeight));
        }, HOVER_INTERVAL_MS);
        setTimeout(() => {
          initialBlinkActive = false;
          if (initialBlinkInterval) {
            clearInterval(initialBlinkInterval);
            initialBlinkInterval = null;
          }
        }, INITIAL_TIMER_LENGTH_MS);
      }

      runInitialBlink();

      document.addEventListener('shopify:section:unload', () => {
        stopHoverRandomizer();
        if (window.HeaderLogoBlink && typeof window.HeaderLogoBlink.stopReMinimiseBlink === 'function') {
          window.HeaderLogoBlink.stopReMinimiseBlink();
        }
        if (initialBlinkTimer) clearTimeout(initialBlinkTimer);
        if (initialBlinkInterval) {
          clearInterval(initialBlinkInterval);
          initialBlinkInterval = null;
        }
      });

      // Re-run the 2s blink when restored from bfcache (e.g., back/forward nav)
      window.addEventListener('pageshow', (event) => {
        if (event && event.persisted) {
          runInitialBlink();
        }
      });
    }

    // Keep header cart count in sync without page refresh
    if (typeof subscribe === 'function' && typeof PUB_SUB_EVENTS !== 'undefined') {
      const setHeaderCartCount = (count) => {
        const desktopEl = document.querySelector('.cart-button--desktop .cart-button__number');
        const mobileEl = document.querySelector('.cart-button--mobile .cart-button__number');
        const menuEl = document.querySelector('.menu-toggle__number');
        [desktopEl, mobileEl, menuEl].forEach((el) => {
          if (!el) return;
          el.textContent = String(count);
          el.classList.toggle('is-zero', count === 0);
        });
      };

      const onCartUpdate = (event) => {
        const count =
          event && event.cartData && typeof event.cartData.item_count === 'number' ? event.cartData.item_count : null;
        if (count === null) return;
        setHeaderCartCount(count);
      };

      const unsubscribeCartUpdate = subscribe(PUB_SUB_EVENTS.cartUpdate, onCartUpdate);
      document.addEventListener('shopify:section:unload', () => {
        if (typeof unsubscribeCartUpdate === 'function') unsubscribeCartUpdate();
      });
    }
  });
</script>

{% schema %}
{
  "name": "header",
  "settings": [
    {
      "type": "link_list",
      "id": "navigation",
      "label": "t:labels.menu"
    },
    {
      "type": "image_picker",
      "id": "logo",
      "label": "logo"
    }
  ]
}
{% endschema %}
