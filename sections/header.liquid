{{ 'header.css' | asset_url | stylesheet_tag }}

<header>
  {% render 'header-logo' %}

  <button class="menu-toggle" aria-label="Open Menu" data-text="Menu">Menu</button>

  <a class="cart-button" href="{{ routes.cart_url }}">
    Bag
    <div class="cart-button__bubble">
      <span class="cart-button__number">{{ cart.item_count }}</span>
    </div>
  </a>

  <div class="menu-overlay" id="menu-overlay">
    <nav class="menu-list">
      {% for link in section.settings.navigation.links %}
        <a
          class="menu-list__item{% if link.active %} menu-list__item--active{% endif %}"
          href="{{ link.url }}"
        >
          {{- link.title -}}
        </a>
      {% endfor %}
      {% if shop.customer_accounts_enabled %}
        <a
          class="menu-list__item{% if routes.account_url == request.path %} menu-list__item--active{% endif %}"
          href="{{ routes.account_url }}"
          >My Account</a
        >
      {% endif %}
    </nav>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const header = document.querySelector('header');
    const menuToggle = document.querySelector('.menu-toggle');
    const body = document.body;
    const footer = document.querySelector('.footer');
    const logoEl = document.querySelector('.header__logo');
    const MAX_RANGE_PX = 300; // range where changes happen

    let footerHeight = footer ? footer.offsetHeight : 500;

    const updateFooterHeight = () => {
      if (footer) {
        footerHeight = footer.offsetHeight + 200;
      }
    };

    const updateHideHeader = () => {
      const doc = document.documentElement;
      const distanceToBottom = doc.scrollHeight - window.scrollY - window.innerHeight;
      const shouldHide = distanceToBottom <= footerHeight;
      body.classList.toggle('hide-header', shouldHide);
    };

    menuToggle.addEventListener('click', () => {
      header.classList.toggle('menu-open');
      const isOpen = header.classList.contains('menu-open');
      menuToggle.textContent = isOpen ? 'Close' : 'Menu';
      menuToggle.setAttribute('aria-label', isOpen ? 'Close Menu' : 'Open Menu');

      // Toggle overflow hidden on body to prevent scrolling
      body.classList.toggle('overflow-hidden', isOpen);
      body.classList.toggle('menu-open', isOpen);
    });

    // Toggle `scrolled` class on header when beyond threshold and hide near page bottom
    if (window.ScrollUtils && typeof window.ScrollUtils.onScroll === 'function') {
      const threshold = MAX_RANGE_PX;
      const onScrollUpdate = (y) => {
        header.classList.toggle('scrolled', y > threshold);
        updateHideHeader();
      };
      const unsubscribe = window.ScrollUtils.onScroll(onScrollUpdate);

      // Optional: clean up if this section is dynamically replaced
      document.addEventListener('shopify:section:unload', () => {
        if (typeof unsubscribe === 'function') unsubscribe();
      });
    } else {
      window.addEventListener('scroll', updateHideHeader, { passive: true });
    }

    window.addEventListener('resize', () => {
      updateFooterHeight();
      updateHideHeader();
    });

    updateFooterHeight();
    updateHideHeader();

    // Step-based random weight for header logo + collapse via wdth after 500px
    if (logoEl) {
      const STEP_PX = 35;

      const MIN_WGHT = 50;
      const MAX_WGHT = 200;

      let lastStep = -1;
      let lastWeight = 0;

      function randomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }

      function applyForY(y) {
        const clampedY = y < 0 ? 0 : y;
        if (clampedY > MAX_RANGE_PX) {
          // Collapse width to 0 so the logo becomes invisible
          logoEl.style.fontVariationSettings = `"wght" ${lastWeight}, "wdth" 0`;
          return;
        }
        // Lock to 80 weight for first 50px from top
        if (clampedY < 50) {
          lastStep = Math.floor(clampedY / STEP_PX);
          lastWeight = 80;
          logoEl.style.fontVariationSettings = `"wght" 80`;
          return;
        }
        const step = Math.floor(clampedY / STEP_PX);
        if (step !== lastStep) {
          lastStep = step;
          lastWeight = randomInt(MIN_WGHT, MAX_WGHT);
          logoEl.style.fontVariationSettings = `"wght" ${lastWeight}`;
        }
      }

      // Initialize with current position
      applyForY(window.scrollY || window.pageYOffset || 0);

      let unsubscribeLogo;
      if (window.ScrollUtils && typeof window.ScrollUtils.onScroll === 'function') {
        unsubscribeLogo = window.ScrollUtils.onScroll(applyForY);
      } else {
        const onScroll = () => applyForY(window.scrollY || window.pageYOffset || 0);
        window.addEventListener('scroll', onScroll, { passive: true });
        unsubscribeLogo = () => window.removeEventListener('scroll', onScroll);
      }

      // Cleanup when section is unloaded in the theme editor
      document.addEventListener('shopify:section:unload', () => {
        if (typeof unsubscribeLogo === 'function') unsubscribeLogo();
      });
    }
  });
</script>

{% schema %}
{
  "name": "header",
  "settings": [
    {
      "type": "link_list",
      "id": "navigation",
      "label": "t:labels.menu"
    },
    {
      "type": "image_picker",
      "id": "logo",
      "label": "logo"
    }
  ]
}
{% endschema %}
